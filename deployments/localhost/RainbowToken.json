{
  "address": "0xA0E4C418D7243220aF79345E77aA2Aa4f4C2De98",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "r",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "g",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "b",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "blendingAccount",
          "type": "address"
        }
      ],
      "name": "BlendingAccountNotAPlayer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "r",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "g",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "b",
              "type": "uint8"
            }
          ],
          "internalType": "struct RainbowToken.Color",
          "name": "blendingColor",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "r",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "g",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "b",
              "type": "uint8"
            }
          ],
          "internalType": "struct RainbowToken.Color",
          "name": "actualColor",
          "type": "tuple"
        }
      ],
      "name": "ColorNotMatching",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "EtherTransferFail",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "InsufficientValue",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "r",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "g",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "b",
          "type": "uint8"
        }
      ],
      "name": "InvalidTargetColor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidZeroBlendingPrice",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PlayerNotWinner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "SenderAlreadyPlayer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "SenderNotAPlayer",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "blendingAccount",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "r",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "g",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "b",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct RainbowToken.Color",
          "name": "color",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "r",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "g",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "b",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct RainbowToken.Color",
          "name": "blendingColor",
          "type": "tuple"
        }
      ],
      "name": "Blended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blendingPrice",
          "type": "uint256"
        }
      ],
      "name": "BlendingPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "GameOver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "r",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "g",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "b",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct RainbowToken.Color",
          "name": "originalColor",
          "type": "tuple"
        }
      ],
      "name": "PlayerJoined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "r",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "g",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "b",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct RainbowToken.Color",
          "name": "color",
          "type": "tuple"
        }
      ],
      "name": "SelfBlended",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_BLENDING_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ENTRY_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SELF_BLEND_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "blendingAccount",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "r",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "g",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "b",
              "type": "uint8"
            }
          ],
          "internalType": "struct RainbowToken.Color",
          "name": "blendingColor",
          "type": "tuple"
        }
      ],
      "name": "blend",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimVictory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "r",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "g",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "b",
                  "type": "uint8"
                }
              ],
              "internalType": "struct RainbowToken.Color",
              "name": "originalColor",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "r",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "g",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "b",
                  "type": "uint8"
                }
              ],
              "internalType": "struct RainbowToken.Color",
              "name": "color",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "blendingPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct RainbowToken.Player",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "getPlayers",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "r",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "g",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "b",
                  "type": "uint8"
                }
              ],
              "internalType": "struct RainbowToken.Color",
              "name": "originalColor",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "r",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "g",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "b",
                  "type": "uint8"
                }
              ],
              "internalType": "struct RainbowToken.Color",
              "name": "color",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "blendingPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct RainbowToken.Player[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTargetColor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "r",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "g",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "b",
              "type": "uint8"
            }
          ],
          "internalType": "struct RainbowToken.Color",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPlayer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joinGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selfBlend",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blendingPrice",
          "type": "uint256"
        }
      ],
      "name": "updateBlendingPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x048dfb517a1a0f5ca3a654b9bce9c84f8bdfd6f4171348da1b7c06d5256def28",
  "receipt": {
    "to": null,
    "from": "0x08C82E599e9Db54B30279bE3A64839F892e9EfE0",
    "contractAddress": "0xA0E4C418D7243220aF79345E77aA2Aa4f4C2De98",
    "transactionIndex": 0,
    "gasUsed": "1887998",
    "logsBloom": "0x
    "blockHash": "0xb543530e0ef69372a4b8e71f4475878655b78495c33f3f75e1d457f7e5f71d34",
    "transactionHash": "0x048dfb517a1a0f5ca3a654b9bce9c84f8bdfd6f4171348da1b7c06d5256def28",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1887998",
    "status": 1,
    "byzantium": true
  },
  "args": [
    210,
    120,
    70
  ],
  "numDeployments": 1,
  "solcInputHash": "060649312830821deca29c2016789967",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"g\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"b\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"blendingAccount\",\"type\":\"address\"}],\"name\":\"BlendingAccountNotAPlayer\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"g\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"b\",\"type\":\"uint8\"}],\"internalType\":\"struct RainbowToken.Color\",\"name\":\"blendingColor\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"g\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"b\",\"type\":\"uint8\"}],\"internalType\":\"struct RainbowToken.Color\",\"name\":\"actualColor\",\"type\":\"tuple\"}],\"name\":\"ColorNotMatching\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"EtherTransferFail\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InsufficientValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"g\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"b\",\"type\":\"uint8\"}],\"name\":\"InvalidTargetColor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroBlendingPrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PlayerNotWinner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SenderAlreadyPlayer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SenderNotAPlayer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"blendingAccount\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"g\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"b\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct RainbowToken.Color\",\"name\":\"color\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"g\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"b\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct RainbowToken.Color\",\"name\":\"blendingColor\",\"type\":\"tuple\"}],\"name\":\"Blended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blendingPrice\",\"type\":\"uint256\"}],\"name\":\"BlendingPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GameOver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"g\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"b\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct RainbowToken.Color\",\"name\":\"originalColor\",\"type\":\"tuple\"}],\"name\":\"PlayerJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"g\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"b\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct RainbowToken.Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"name\":\"SelfBlended\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_BLENDING_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENTRY_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SELF_BLEND_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"blendingAccount\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"g\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"b\",\"type\":\"uint8\"}],\"internalType\":\"struct RainbowToken.Color\",\"name\":\"blendingColor\",\"type\":\"tuple\"}],\"name\":\"blend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimVictory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPlayer\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"g\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"b\",\"type\":\"uint8\"}],\"internalType\":\"struct RainbowToken.Color\",\"name\":\"originalColor\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"g\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"b\",\"type\":\"uint8\"}],\"internalType\":\"struct RainbowToken.Color\",\"name\":\"color\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"blendingPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct RainbowToken.Player\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"getPlayers\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"g\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"b\",\"type\":\"uint8\"}],\"internalType\":\"struct RainbowToken.Color\",\"name\":\"originalColor\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"g\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"b\",\"type\":\"uint8\"}],\"internalType\":\"struct RainbowToken.Color\",\"name\":\"color\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"blendingPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct RainbowToken.Player[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTargetColor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"g\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"b\",\"type\":\"uint8\"}],\"internalType\":\"struct RainbowToken.Color\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPlayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joinGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfBlend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blendingPrice\",\"type\":\"uint256\"}],\"name\":\"updateBlendingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RainbowToken.sol\":\"RainbowToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/RainbowToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\ncontract RainbowToken is Context {\\n    struct Color {\\n        uint8 r;\\n        uint8 g;\\n        uint8 b;\\n    }\\n\\n    struct Player {\\n        Color originalColor;\\n        Color color;\\n        uint256 blendingPrice;\\n    }\\n\\n    uint256 public constant DEFAULT_BLENDING_PRICE = 0.1 ether;\\n    uint256 public constant SELF_BLEND_PRICE = 0.5 ether;\\n    uint256 public constant ENTRY_FEE = 0.1 ether;\\n\\n    Color private _targetColor;\\n\\n    mapping(address => Player) private _players;\\n\\n    error InvalidTargetColor(uint8 r, uint8 g, uint8 b);\\n    error SenderAlreadyPlayer(address account);\\n    error InsufficientValue(uint256 value);\\n    error SenderNotAPlayer(address account);\\n    error BlendingAccountNotAPlayer(address blendingAccount);\\n    error InvalidZeroBlendingPrice();\\n    error ColorNotMatching(Color blendingColor, Color actualColor);\\n    error PlayerNotWinner(address account);\\n    error EtherTransferFail(address recipient);\\n\\n    event PlayerJoined(address indexed account, Color originalColor);\\n    event BlendingPriceUpdated(address indexed account, uint256 blendingPrice);\\n    event SelfBlended(address indexed account, Color color);\\n    event Blended(\\n        address indexed account,\\n        address indexed blendingAccount,\\n        Color color,\\n        Color blendingColor\\n    );\\n    event GameOver(address indexed winner, uint256 amount);\\n\\n    constructor(\\n        uint8 r,\\n        uint8 g,\\n        uint8 b\\n    ) {\\n        if (r <= 5 || r >= 250 || g <= 5 || g >= 250 || b <= 5 || b >= 250)\\n            revert InvalidTargetColor(r, g, b);\\n        _targetColor = Color({r: r, g: g, b: b});\\n    }\\n\\n    modifier onlyPlayer() {\\n        if (!_isPlayer(_msgSender())) revert SenderNotAPlayer(_msgSender());\\n        _;\\n    }\\n\\n    function joinGame() public payable {\\n        if (_isPlayer(_msgSender())) revert SenderAlreadyPlayer(_msgSender());\\n        if (msg.value < ENTRY_FEE) revert InsufficientValue(msg.value);\\n\\n        Color memory originalColor = _generateOriginalColor();\\n\\n        _players[_msgSender()] = Player({\\n            originalColor: originalColor,\\n            color: originalColor,\\n            blendingPrice: DEFAULT_BLENDING_PRICE\\n        });\\n\\n        emit PlayerJoined(_msgSender(), originalColor);\\n    }\\n\\n    function updateBlendingPrice(uint256 blendingPrice) public onlyPlayer {\\n        if (blendingPrice == 0) revert InvalidZeroBlendingPrice();\\n        _players[_msgSender()].blendingPrice = blendingPrice;\\n        emit BlendingPriceUpdated(_msgSender(), blendingPrice);\\n    }\\n\\n    function selfBlend() public payable onlyPlayer {\\n        if (msg.value < SELF_BLEND_PRICE) revert InsufficientValue(msg.value);\\n        Player storage _player = _players[_msgSender()];\\n        _blend(_player.color, _player.originalColor);\\n        emit SelfBlended(_msgSender(), _player.color);\\n    }\\n\\n    function blend(address blendingAccount, Color calldata blendingColor)\\n        public\\n        payable\\n        onlyPlayer\\n    {\\n        if (!_isPlayer(blendingAccount))\\n            revert BlendingAccountNotAPlayer(blendingAccount);\\n        Player memory otherPlayer = _players[blendingAccount];\\n        if (msg.value < otherPlayer.blendingPrice)\\n            revert InsufficientValue(msg.value);\\n        if (\\n            otherPlayer.color.r != blendingColor.r ||\\n            otherPlayer.color.g != blendingColor.g ||\\n            otherPlayer.color.b != blendingColor.b\\n        ) revert ColorNotMatching(blendingColor, otherPlayer.color);\\n\\n        (bool sent, ) = blendingAccount.call{value: msg.value / 2}(\\\"\\\");\\n        if (!sent) revert EtherTransferFail(blendingAccount);\\n\\n        Color storage _color = _players[_msgSender()].color;\\n        _blend(_color, blendingColor);\\n\\n        emit Blended(_msgSender(), blendingAccount, _color, blendingColor);\\n    }\\n\\n    function claimVictory() public onlyPlayer {\\n        Color memory playerColor = _players[_msgSender()].color;\\n\\n        uint16 r = uint16(_absSub(playerColor.r, _targetColor.r));\\n        uint16 g = uint16(_absSub(playerColor.g, _targetColor.g));\\n        uint16 b = uint16(_absSub(playerColor.b, _targetColor.b));\\n\\n        if (r * r + g * g + b * b > 25) revert PlayerNotWinner(_msgSender());\\n\\n        emit GameOver(_msgSender(), address(this).balance);\\n\\n        selfdestruct(payable(_msgSender()));\\n    }\\n\\n    function isPlayer(address account) public view returns (bool) {\\n        return _isPlayer(account);\\n    }\\n\\n    function getPlayer(address account) public view returns (Player memory) {\\n        return _players[account];\\n    }\\n\\n    function getPlayers(address[] calldata accounts) public view returns (Player[] memory) {\\n        Player[] memory players = new Player[](accounts.length);\\n        for (uint256 index = 0; index < accounts.length; index++) {\\n            players[index] = _players[accounts[index]];\\n        }\\n        return players;\\n    }\\n\\n    function getTargetColor() public view returns (Color memory) {\\n        return _targetColor;\\n    }\\n\\n    function _absSub(uint8 a, uint8 b) internal pure returns (uint8) {\\n        unchecked {\\n            if (a > b) {\\n                return a - b;\\n            }\\n            return b - a;\\n        }\\n    }\\n\\n    function _generateOriginalColor() internal view returns (Color memory) {\\n        uint256 defaultColorSeed = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    _msgSender(),\\n                    blockhash(block.number - 1),\\n                    block.timestamp\\n                )\\n            )\\n        );\\n\\n        Color memory color = Color({\\n            r: _toPrimary(uint8((defaultColorSeed & 0xff0000) / 0xffff)),\\n            g: _toPrimary(uint8((defaultColorSeed & 0xff00) / 0xff)),\\n            b: _toPrimary(uint8(defaultColorSeed & 0xff))\\n        });\\n\\n        return color;\\n    }\\n\\n    function _toPrimary(uint8 colorComponent) internal pure returns (uint8) {\\n        if (colorComponent > 127) {\\n            return 255;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function _isPlayer(address account) internal view returns (bool) {\\n        return _players[account].blendingPrice > 0;\\n    }\\n\\n    function _blend(Color storage _color, Color memory blendingColor) internal {\\n        _color.r = uint8((uint16(_color.r) + uint16(blendingColor.r)) / 2);\\n        _color.g = uint8((uint16(_color.g) + uint16(blendingColor.g)) / 2);\\n        _color.b = uint8((uint16(_color.b) + uint16(blendingColor.b)) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x7fb6f1a2c802fed218ef31c3dbd45ced4876f8ff7d920869df665efa231a21c7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200231d3803806200231d833981810160405281019062000037919062000183565b60058360ff161115806200004f575060fa8360ff1610155b806200005f575060058260ff1611155b806200006f575060fa8260ff1610155b806200007f575060058160ff1611155b806200008f575060fa8160ff1610155b15620000d8578282826040517f4aaa22c3000000000000000000000000000000000000000000000000000000008152600401620000cf93929190620001ea565b60405180910390fd5b60405180606001604052808460ff1681526020018360ff1681526020018260ff168152506000808201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360ff1602179055509050505050506200024e565b6000815190506200017d8162000234565b92915050565b6000806000606084860312156200019957600080fd5b6000620001a9868287016200016c565b9350506020620001bc868287016200016c565b9250506040620001cf868287016200016c565b9150509250925092565b620001e48162000227565b82525050565b6000606082019050620002016000830186620001d9565b620002106020830185620001d9565b6200021f6040830184620001d9565b949350505050565b600060ff82169050919050565b6200023f8162000227565b81146200024b57600080fd5b50565b6120bf806200025e6000396000f3fe6080604052600436106100a75760003560e01c8063723c496211610064578063723c49621461018e5780638bc9a128146101b95780638fc4bfb7146101e2578063d4f77b1c1461021f578063e4f28e8914610229578063f6d361cc14610254576100a7565b806309c95e10146100ac5780631abddf33146100e95780633c51de82146101005780635c12cd4b1461011c578063641a2e09146101595780636fe876b114610184575b600080fd5b3480156100b857600080fd5b506100d360048036038101906100ce91906116a5565b61027f565b6040516100e09190611b92565b60405180910390f35b3480156100f557600080fd5b506100fe610291565b005b61011a600480360381019061011591906116ce565b610507565b005b34801561012857600080fd5b50610143600480360381019061013e91906116a5565b610978565b6040516101509190611c35565b60405180910390f35b34801561016557600080fd5b5061016e610ab1565b60405161017b9190611bd6565b60405180910390f35b61018c610b22565b005b34801561019a57600080fd5b506101a3610cde565b6040516101b09190611c50565b60405180910390f35b3480156101c557600080fd5b506101e060048036038101906101db9190611778565b610cea565b005b3480156101ee57600080fd5b506102096004803603810190610204919061170a565b610e23565b6040516102169190611b70565b60405180910390f35b61022761108d565b005b34801561023557600080fd5b5061023e6112e9565b60405161024b9190611c50565b60405180910390f35b34801561026057600080fd5b506102696112f5565b6040516102769190611c50565b60405180910390f35b600061028a82611301565b9050919050565b6102a161029c61134f565b611301565b6102e9576102ad61134f565b6040517fa6b398560000000000000000000000000000000000000000000000000000000081526004016102e09190611b55565b60405180910390fd5b6000600160006102f761134f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff1660ff1660ff1681525050905060006103b982600001516000800160009054906101000a900460ff16611357565b60ff16905060006103df83602001516000800160019054906101000a900460ff16611357565b60ff169050600061040584604001516000800160029054906101000a900460ff16611357565b60ff169050601981826104189190611d85565b83846104249190611d85565b85866104309190611d85565b61043a9190611ceb565b6104449190611ceb565b61ffff1611156104925761045661134f565b6040517f6599915c0000000000000000000000000000000000000000000000000000000081526004016104899190611b55565b60405180910390fd5b61049a61134f565b73ffffffffffffffffffffffffffffffffffffffff167f864bccc7be387c1af59ea4287b5f055331e0ab6b9b546516d6265450d296bb15476040516104df9190611c50565b60405180910390a26104ef61134f565b73ffffffffffffffffffffffffffffffffffffffff16ff5b61051761051261134f565b611301565b61055f5761052361134f565b6040517fa6b398560000000000000000000000000000000000000000000000000000000081526004016105569190611b55565b60405180910390fd5b61056882611301565b6105a957816040517fac8319b10000000000000000000000000000000000000000000000000000000081526004016105a09190611b55565b60405180910390fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082016040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff1660ff1660ff16815250508152602001600182016040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff1660ff1660ff168152505081526020016002820154815250509050806040015134101561072057346040517fa518cf3c0000000000000000000000000000000000000000000000000000000081526004016107179190611c50565b60405180910390fd5b81600001602081019061073391906117a1565b60ff1681602001516000015160ff1614158061076f575081602001602081019061075d91906117a1565b60ff1681602001516020015160ff1614155b8061079a575081604001602081019061078891906117a1565b60ff1681602001516040015160ff1614155b156107e2578181602001516040517fe55977c30000000000000000000000000000000000000000000000000000000081526004016107d9929190611bad565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff166002346108089190611d54565b60405161081490611b40565b60006040518083038185875af1925050503d8060008114610851576040519150601f19603f3d011682016040523d82523d6000602084013e610856565b606091505b505090508061089c57836040517fdd74906f0000000000000000000000000000000000000000000000000000000081526004016108939190611b55565b60405180910390fd5b6000600160006108aa61134f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101905061090381858036038101906108fe919061174f565b61137d565b8473ffffffffffffffffffffffffffffffffffffffff1661092261134f565b73ffffffffffffffffffffffffffffffffffffffff167f4d8f882d09d80972f0145b1f2468ff8a4daf40052a9ec196a05794a889d3f2968387604051610969929190611c0c565b60405180910390a35050505050565b61098061154a565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082016040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff1660ff1660ff16815250508152602001600182016040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff1660ff1660ff168152505081526020016002820154815250509050919050565b610ab9611577565b60006040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff1660ff1660ff1681525050905090565b610b32610b2d61134f565b611301565b610b7a57610b3e61134f565b6040517fa6b39856000000000000000000000000000000000000000000000000000000008152600401610b719190611b55565b60405180910390fd5b6706f05b59d3b20000341015610bc757346040517fa518cf3c000000000000000000000000000000000000000000000000000000008152600401610bbe9190611c50565b60405180910390fd5b600060016000610bd561134f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610c8381600101826000016040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff1660ff1660ff168152505061137d565b610c8b61134f565b73ffffffffffffffffffffffffffffffffffffffff167f7bccfc393968f47d8bcc63bcdc6ae127442c4ebef9a39d4c96b7707510850a5682600101604051610cd39190611bf1565b60405180910390a250565b67016345785d8a000081565b610cfa610cf561134f565b611301565b610d4257610d0661134f565b6040517fa6b39856000000000000000000000000000000000000000000000000000000008152600401610d399190611b55565b60405180910390fd5b6000811415610d7d576040517f899598f100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060016000610d8a61134f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550610dd361134f565b73ffffffffffffffffffffffffffffffffffffffff167f9dad8a821e2f8f51fbfcd99e32dd5b871076d7517ce5c1c01fe7f36bad08d0d082604051610e189190611c50565b60405180910390a250565b606060008383905067ffffffffffffffff811115610e6a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610ea357816020015b610e9061154a565b815260200190600190039081610e885790505b50905060005b848490508110156110825760016000868684818110610ef1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610f0691906116a5565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082016040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff1660ff1660ff16815250508152602001600182016040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff1660ff1660ff16815250508152602001600282015481525050828281518110611064577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250808061107a90611eee565b915050610ea9565b508091505092915050565b61109d61109861134f565b611301565b156110e6576110aa61134f565b6040517f66ea9f2e0000000000000000000000000000000000000000000000000000000081526004016110dd9190611b55565b60405180910390fd5b67016345785d8a000034101561113357346040517fa518cf3c00000000000000000000000000000000000000000000000000000000815260040161112a9190611c50565b60405180910390fd5b600061113d61146e565b9050604051806060016040528082815260200182815260200167016345785d8a00008152506001600061116e61134f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360ff160217905550505060208201518160010160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360ff16021790555050506040820151816002015590505061129961134f565b73ffffffffffffffffffffffffffffffffffffffff167ff93af79224d37bfb0f4182ee1dc777563270ec6a208db996b70a5533df0b408b826040516112de9190611bd6565b60405180910390a250565b6706f05b59d3b2000081565b67016345785d8a000081565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154119050919050565b600033905090565b60008160ff168360ff161115611371578183039050611377565b82820390505b92915050565b6002816000015160ff168360000160009054906101000a900460ff1660ff166113a69190611ceb565b6113b09190611d23565b8260000160006101000a81548160ff021916908360ff1602179055506002816020015160ff168360000160019054906101000a900460ff1660ff166113f59190611ceb565b6113ff9190611d23565b8260000160016101000a81548160ff021916908360ff1602179055506002816040015160ff168360000160029054906101000a900460ff1660ff166114449190611ceb565b61144e9190611d23565b8260000160026101000a81548160ff021916908360ff1602179055505050565b611476611577565b600061148061134f565b60014361148d9190611dc1565b40426040516020016114a193929190611b03565b6040516020818303038152906040528051906020012060001c9050600060405180606001604052806114e461ffff62ff000086166114df9190611d54565b611529565b60ff16815260200161150560ff61ff0086166115009190611d54565b611529565b60ff16815260200161151960ff8516611529565b60ff168152509050809250505090565b6000607f8260ff1611156115405760ff9050611545565b600090505b919050565b604051806060016040528061155d611577565b815260200161156a611577565b8152602001600081525090565b6040518060600160405280600060ff168152602001600060ff168152602001600060ff1681525090565b6000813590506115b081612044565b92915050565b60008083601f8401126115c857600080fd5b8235905067ffffffffffffffff8111156115e157600080fd5b6020830191508360208202830111156115f957600080fd5b9250929050565b60006060828403121561161257600080fd5b81905092915050565b60006060828403121561162d57600080fd5b6116376060611c6b565b9050600061164784828501611690565b600083015250602061165b84828501611690565b602083015250604061166f84828501611690565b60408301525092915050565b60008135905061168a8161205b565b92915050565b60008135905061169f81612072565b92915050565b6000602082840312156116b757600080fd5b60006116c5848285016115a1565b91505092915050565b600080608083850312156116e157600080fd5b60006116ef858286016115a1565b925050602061170085828601611600565b9150509250929050565b6000806020838503121561171d57600080fd5b600083013567ffffffffffffffff81111561173757600080fd5b611743858286016115b6565b92509250509250929050565b60006060828403121561176157600080fd5b600061176f8482850161161b565b91505092915050565b60006020828403121561178a57600080fd5b60006117988482850161167b565b91505092915050565b6000602082840312156117b357600080fd5b60006117c184828501611690565b91505092915050565b60006117d68383611a3b565b60e08301905092915050565b6117eb81611e02565b82525050565b6118026117fd82611e02565b611f37565b82525050565b600061181382611ca0565b61181d8185611cb8565b935061182883611c90565b8060005b8381101561185957815161184088826117ca565b975061184b83611cab565b92505060018101905061182c565b5085935050505092915050565b61186f81611e14565b82525050565b61188661188182611e20565b611f49565b82525050565b6000611899600083611cc9565b91506118a482612041565b600082019050919050565b606082016118c06000830183611cd4565b6118cd6000850182611af4565b506118db6020830183611cd4565b6118e86020850182611af4565b506118f66040830183611cd4565b6119036040850182611af4565b50505050565b60608201600082015161191f6000850182611af4565b5060208201516119326020850182611af4565b5060408201516119456040850182611af4565b50505050565b6060820160008201516119616000850182611af4565b5060208201516119746020850182611af4565b5060408201516119876040850182611af4565b50505050565b6060820160008083015490506119a281611e6f565b6119af6000860182611af4565b506119b981611e89565b6119c66020860182611af4565b506119d081611ea3565b6119dd6040860182611af4565b5050505050565b6060820160008083015490506119f981611e6f565b611a066000860182611af4565b50611a1081611e89565b611a1d6020860182611af4565b50611a2781611ea3565b611a346040860182611af4565b5050505050565b60e082016000820151611a516000850182611909565b506020820151611a646060850182611909565b506040820151611a7760c0850182611abf565b50505050565b60e082016000820151611a936000850182611909565b506020820151611aa66060850182611909565b506040820151611ab960c0850182611abf565b50505050565b611ac881611e58565b82525050565b611ad781611e58565b82525050565b611aee611ae982611e58565b611f65565b82525050565b611afd81611e62565b82525050565b6000611b0f82866117f1565b601482019150611b1f8285611875565b602082019150611b2f8284611add565b602082019150819050949350505050565b6000611b4b8261188c565b9150819050919050565b6000602082019050611b6a60008301846117e2565b92915050565b60006020820190508181036000830152611b8a8184611808565b905092915050565b6000602082019050611ba76000830184611866565b92915050565b600060c082019050611bc260008301856118af565b611bcf606083018461194b565b9392505050565b6000606082019050611beb600083018461194b565b92915050565b6000606082019050611c0660008301846119e4565b92915050565b600060c082019050611c21600083018561198d565b611c2e60608301846118af565b9392505050565b600060e082019050611c4a6000830184611a7d565b92915050565b6000602082019050611c656000830184611ace565b92915050565b6000611c75611c86565b9050611c818282611ebd565b919050565b6000604051905090565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b6000611ce36020840184611690565b905092915050565b6000611cf682611e2a565b9150611d0183611e2a565b92508261ffff03821115611d1857611d17611f6f565b5b828201905092915050565b6000611d2e82611e2a565b9150611d3983611e2a565b925082611d4957611d48611f9e565b5b828204905092915050565b6000611d5f82611e58565b9150611d6a83611e58565b925082611d7a57611d79611f9e565b5b828204905092915050565b6000611d9082611e2a565b9150611d9b83611e2a565b92508161ffff0483118215151615611db657611db5611f6f565b5b828202905092915050565b6000611dcc82611e58565b9150611dd783611e58565b925082821015611dea57611de9611f6f565b5b828203905092915050565b600060ff82169050919050565b6000611e0d82611e38565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000611e82611e7d8361201a565b611df5565b9050919050565b6000611e9c611e9783612034565b611df5565b9050919050565b6000611eb6611eb183612027565b611df5565b9050919050565b611ec682611ffc565b810181811067ffffffffffffffff82111715611ee557611ee4611fcd565b5b80604052505050565b6000611ef982611e58565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611f2c57611f2b611f6f565b5b600182019050919050565b6000611f4282611f53565b9050919050565b6000819050919050565b6000611f5e8261200d565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b60008160001c9050919050565b60008160101c9050919050565b60008160081c9050919050565b50565b61204d81611e02565b811461205857600080fd5b50565b61206481611e58565b811461206f57600080fd5b50565b61207b81611e62565b811461208657600080fd5b5056fea2646970667358221220247a093bae71601f3bf3241ab8b5a77482867dc0b32800322f49000a46f35d7964736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c8063723c496211610064578063723c49621461018e5780638bc9a128146101b95780638fc4bfb7146101e2578063d4f77b1c1461021f578063e4f28e8914610229578063f6d361cc14610254576100a7565b806309c95e10146100ac5780631abddf33146100e95780633c51de82146101005780635c12cd4b1461011c578063641a2e09146101595780636fe876b114610184575b600080fd5b3480156100b857600080fd5b506100d360048036038101906100ce91906116a5565b61027f565b6040516100e09190611b92565b60405180910390f35b3480156100f557600080fd5b506100fe610291565b005b61011a600480360381019061011591906116ce565b610507565b005b34801561012857600080fd5b50610143600480360381019061013e91906116a5565b610978565b6040516101509190611c35565b60405180910390f35b34801561016557600080fd5b5061016e610ab1565b60405161017b9190611bd6565b60405180910390f35b61018c610b22565b005b34801561019a57600080fd5b506101a3610cde565b6040516101b09190611c50565b60405180910390f35b3480156101c557600080fd5b506101e060048036038101906101db9190611778565b610cea565b005b3480156101ee57600080fd5b506102096004803603810190610204919061170a565b610e23565b6040516102169190611b70565b60405180910390f35b61022761108d565b005b34801561023557600080fd5b5061023e6112e9565b60405161024b9190611c50565b60405180910390f35b34801561026057600080fd5b506102696112f5565b6040516102769190611c50565b60405180910390f35b600061028a82611301565b9050919050565b6102a161029c61134f565b611301565b6102e9576102ad61134f565b6040517fa6b398560000000000000000000000000000000000000000000000000000000081526004016102e09190611b55565b60405180910390fd5b6000600160006102f761134f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff1660ff1660ff1681525050905060006103b982600001516000800160009054906101000a900460ff16611357565b60ff16905060006103df83602001516000800160019054906101000a900460ff16611357565b60ff169050600061040584604001516000800160029054906101000a900460ff16611357565b60ff169050601981826104189190611d85565b83846104249190611d85565b85866104309190611d85565b61043a9190611ceb565b6104449190611ceb565b61ffff1611156104925761045661134f565b6040517f6599915c0000000000000000000000000000000000000000000000000000000081526004016104899190611b55565b60405180910390fd5b61049a61134f565b73ffffffffffffffffffffffffffffffffffffffff167f864bccc7be387c1af59ea4287b5f055331e0ab6b9b546516d6265450d296bb15476040516104df9190611c50565b60405180910390a26104ef61134f565b73ffffffffffffffffffffffffffffffffffffffff16ff5b61051761051261134f565b611301565b61055f5761052361134f565b6040517fa6b398560000000000000000000000000000000000000000000000000000000081526004016105569190611b55565b60405180910390fd5b61056882611301565b6105a957816040517fac8319b10000000000000000000000000000000000000000000000000000000081526004016105a09190611b55565b60405180910390fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082016040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff1660ff1660ff16815250508152602001600182016040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff1660ff1660ff168152505081526020016002820154815250509050806040015134101561072057346040517fa518cf3c0000000000000000000000000000000000000000000000000000000081526004016107179190611c50565b60405180910390fd5b81600001602081019061073391906117a1565b60ff1681602001516000015160ff1614158061076f575081602001602081019061075d91906117a1565b60ff1681602001516020015160ff1614155b8061079a575081604001602081019061078891906117a1565b60ff1681602001516040015160ff1614155b156107e2578181602001516040517fe55977c30000000000000000000000000000000000000000000000000000000081526004016107d9929190611bad565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff166002346108089190611d54565b60405161081490611b40565b60006040518083038185875af1925050503d8060008114610851576040519150601f19603f3d011682016040523d82523d6000602084013e610856565b606091505b505090508061089c57836040517fdd74906f0000000000000000000000000000000000000000000000000000000081526004016108939190611b55565b60405180910390fd5b6000600160006108aa61134f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101905061090381858036038101906108fe919061174f565b61137d565b8473ffffffffffffffffffffffffffffffffffffffff1661092261134f565b73ffffffffffffffffffffffffffffffffffffffff167f4d8f882d09d80972f0145b1f2468ff8a4daf40052a9ec196a05794a889d3f2968387604051610969929190611c0c565b60405180910390a35050505050565b61098061154a565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082016040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff1660ff1660ff16815250508152602001600182016040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff1660ff1660ff168152505081526020016002820154815250509050919050565b610ab9611577565b60006040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff1660ff1660ff1681525050905090565b610b32610b2d61134f565b611301565b610b7a57610b3e61134f565b6040517fa6b39856000000000000000000000000000000000000000000000000000000008152600401610b719190611b55565b60405180910390fd5b6706f05b59d3b20000341015610bc757346040517fa518cf3c000000000000000000000000000000000000000000000000000000008152600401610bbe9190611c50565b60405180910390fd5b600060016000610bd561134f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610c8381600101826000016040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff1660ff1660ff168152505061137d565b610c8b61134f565b73ffffffffffffffffffffffffffffffffffffffff167f7bccfc393968f47d8bcc63bcdc6ae127442c4ebef9a39d4c96b7707510850a5682600101604051610cd39190611bf1565b60405180910390a250565b67016345785d8a000081565b610cfa610cf561134f565b611301565b610d4257610d0661134f565b6040517fa6b39856000000000000000000000000000000000000000000000000000000008152600401610d399190611b55565b60405180910390fd5b6000811415610d7d576040517f899598f100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060016000610d8a61134f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550610dd361134f565b73ffffffffffffffffffffffffffffffffffffffff167f9dad8a821e2f8f51fbfcd99e32dd5b871076d7517ce5c1c01fe7f36bad08d0d082604051610e189190611c50565b60405180910390a250565b606060008383905067ffffffffffffffff811115610e6a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610ea357816020015b610e9061154a565b815260200190600190039081610e885790505b50905060005b848490508110156110825760016000868684818110610ef1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610f0691906116a5565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082016040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff1660ff1660ff16815250508152602001600182016040518060600160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a900460ff1660ff1660ff16815250508152602001600282015481525050828281518110611064577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250808061107a90611eee565b915050610ea9565b508091505092915050565b61109d61109861134f565b611301565b156110e6576110aa61134f565b6040517f66ea9f2e0000000000000000000000000000000000000000000000000000000081526004016110dd9190611b55565b60405180910390fd5b67016345785d8a000034101561113357346040517fa518cf3c00000000000000000000000000000000000000000000000000000000815260040161112a9190611c50565b60405180910390fd5b600061113d61146e565b9050604051806060016040528082815260200182815260200167016345785d8a00008152506001600061116e61134f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360ff160217905550505060208201518160010160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360ff16021790555050506040820151816002015590505061129961134f565b73ffffffffffffffffffffffffffffffffffffffff167ff93af79224d37bfb0f4182ee1dc777563270ec6a208db996b70a5533df0b408b826040516112de9190611bd6565b60405180910390a250565b6706f05b59d3b2000081565b67016345785d8a000081565b600080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154119050919050565b600033905090565b60008160ff168360ff161115611371578183039050611377565b82820390505b92915050565b6002816000015160ff168360000160009054906101000a900460ff1660ff166113a69190611ceb565b6113b09190611d23565b8260000160006101000a81548160ff021916908360ff1602179055506002816020015160ff168360000160019054906101000a900460ff1660ff166113f59190611ceb565b6113ff9190611d23565b8260000160016101000a81548160ff021916908360ff1602179055506002816040015160ff168360000160029054906101000a900460ff1660ff166114449190611ceb565b61144e9190611d23565b8260000160026101000a81548160ff021916908360ff1602179055505050565b611476611577565b600061148061134f565b60014361148d9190611dc1565b40426040516020016114a193929190611b03565b6040516020818303038152906040528051906020012060001c9050600060405180606001604052806114e461ffff62ff000086166114df9190611d54565b611529565b60ff16815260200161150560ff61ff0086166115009190611d54565b611529565b60ff16815260200161151960ff8516611529565b60ff168152509050809250505090565b6000607f8260ff1611156115405760ff9050611545565b600090505b919050565b604051806060016040528061155d611577565b815260200161156a611577565b8152602001600081525090565b6040518060600160405280600060ff168152602001600060ff168152602001600060ff1681525090565b6000813590506115b081612044565b92915050565b60008083601f8401126115c857600080fd5b8235905067ffffffffffffffff8111156115e157600080fd5b6020830191508360208202830111156115f957600080fd5b9250929050565b60006060828403121561161257600080fd5b81905092915050565b60006060828403121561162d57600080fd5b6116376060611c6b565b9050600061164784828501611690565b600083015250602061165b84828501611690565b602083015250604061166f84828501611690565b60408301525092915050565b60008135905061168a8161205b565b92915050565b60008135905061169f81612072565b92915050565b6000602082840312156116b757600080fd5b60006116c5848285016115a1565b91505092915050565b600080608083850312156116e157600080fd5b60006116ef858286016115a1565b925050602061170085828601611600565b9150509250929050565b6000806020838503121561171d57600080fd5b600083013567ffffffffffffffff81111561173757600080fd5b611743858286016115b6565b92509250509250929050565b60006060828403121561176157600080fd5b600061176f8482850161161b565b91505092915050565b60006020828403121561178a57600080fd5b60006117988482850161167b565b91505092915050565b6000602082840312156117b357600080fd5b60006117c184828501611690565b91505092915050565b60006117d68383611a3b565b60e08301905092915050565b6117eb81611e02565b82525050565b6118026117fd82611e02565b611f37565b82525050565b600061181382611ca0565b61181d8185611cb8565b935061182883611c90565b8060005b8381101561185957815161184088826117ca565b975061184b83611cab565b92505060018101905061182c565b5085935050505092915050565b61186f81611e14565b82525050565b61188661188182611e20565b611f49565b82525050565b6000611899600083611cc9565b91506118a482612041565b600082019050919050565b606082016118c06000830183611cd4565b6118cd6000850182611af4565b506118db6020830183611cd4565b6118e86020850182611af4565b506118f66040830183611cd4565b6119036040850182611af4565b50505050565b60608201600082015161191f6000850182611af4565b5060208201516119326020850182611af4565b5060408201516119456040850182611af4565b50505050565b6060820160008201516119616000850182611af4565b5060208201516119746020850182611af4565b5060408201516119876040850182611af4565b50505050565b6060820160008083015490506119a281611e6f565b6119af6000860182611af4565b506119b981611e89565b6119c66020860182611af4565b506119d081611ea3565b6119dd6040860182611af4565b5050505050565b6060820160008083015490506119f981611e6f565b611a066000860182611af4565b50611a1081611e89565b611a1d6020860182611af4565b50611a2781611ea3565b611a346040860182611af4565b5050505050565b60e082016000820151611a516000850182611909565b506020820151611a646060850182611909565b506040820151611a7760c0850182611abf565b50505050565b60e082016000820151611a936000850182611909565b506020820151611aa66060850182611909565b506040820151611ab960c0850182611abf565b50505050565b611ac881611e58565b82525050565b611ad781611e58565b82525050565b611aee611ae982611e58565b611f65565b82525050565b611afd81611e62565b82525050565b6000611b0f82866117f1565b601482019150611b1f8285611875565b602082019150611b2f8284611add565b602082019150819050949350505050565b6000611b4b8261188c565b9150819050919050565b6000602082019050611b6a60008301846117e2565b92915050565b60006020820190508181036000830152611b8a8184611808565b905092915050565b6000602082019050611ba76000830184611866565b92915050565b600060c082019050611bc260008301856118af565b611bcf606083018461194b565b9392505050565b6000606082019050611beb600083018461194b565b92915050565b6000606082019050611c0660008301846119e4565b92915050565b600060c082019050611c21600083018561198d565b611c2e60608301846118af565b9392505050565b600060e082019050611c4a6000830184611a7d565b92915050565b6000602082019050611c656000830184611ace565b92915050565b6000611c75611c86565b9050611c818282611ebd565b919050565b6000604051905090565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b6000611ce36020840184611690565b905092915050565b6000611cf682611e2a565b9150611d0183611e2a565b92508261ffff03821115611d1857611d17611f6f565b5b828201905092915050565b6000611d2e82611e2a565b9150611d3983611e2a565b925082611d4957611d48611f9e565b5b828204905092915050565b6000611d5f82611e58565b9150611d6a83611e58565b925082611d7a57611d79611f9e565b5b828204905092915050565b6000611d9082611e2a565b9150611d9b83611e2a565b92508161ffff0483118215151615611db657611db5611f6f565b5b828202905092915050565b6000611dcc82611e58565b9150611dd783611e58565b925082821015611dea57611de9611f6f565b5b828203905092915050565b600060ff82169050919050565b6000611e0d82611e38565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000611e82611e7d8361201a565b611df5565b9050919050565b6000611e9c611e9783612034565b611df5565b9050919050565b6000611eb6611eb183612027565b611df5565b9050919050565b611ec682611ffc565b810181811067ffffffffffffffff82111715611ee557611ee4611fcd565b5b80604052505050565b6000611ef982611e58565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611f2c57611f2b611f6f565b5b600182019050919050565b6000611f4282611f53565b9050919050565b6000819050919050565b6000611f5e8261200d565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b60008160001c9050919050565b60008160101c9050919050565b60008160081c9050919050565b50565b61204d81611e02565b811461205857600080fd5b50565b61206481611e58565b811461206f57600080fd5b50565b61207b81611e62565b811461208657600080fd5b5056fea2646970667358221220247a093bae71601f3bf3241ab8b5a77482867dc0b32800322f49000a46f35d7964736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 55,
        "contract": "contracts/RainbowToken.sol:RainbowToken",
        "label": "_targetColor",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Color)34_storage"
      },
      {
        "astId": 60,
        "contract": "contracts/RainbowToken.sol:RainbowToken",
        "label": "_players",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Player)43_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Player)43_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RainbowToken.Player)",
        "numberOfBytes": "32",
        "value": "t_struct(Player)43_storage"
      },
      "t_struct(Color)34_storage": {
        "encoding": "inplace",
        "label": "struct RainbowToken.Color",
        "members": [
          {
            "astId": 29,
            "contract": "contracts/RainbowToken.sol:RainbowToken",
            "label": "r",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 31,
            "contract": "contracts/RainbowToken.sol:RainbowToken",
            "label": "g",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 33,
            "contract": "contracts/RainbowToken.sol:RainbowToken",
            "label": "b",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Player)43_storage": {
        "encoding": "inplace",
        "label": "struct RainbowToken.Player",
        "members": [
          {
            "astId": 37,
            "contract": "contracts/RainbowToken.sol:RainbowToken",
            "label": "originalColor",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Color)34_storage"
          },
          {
            "astId": 40,
            "contract": "contracts/RainbowToken.sol:RainbowToken",
            "label": "color",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Color)34_storage"
          },
          {
            "astId": 42,
            "contract": "contracts/RainbowToken.sol:RainbowToken",
            "label": "blendingPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}